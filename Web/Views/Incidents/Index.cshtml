@using System.Web
@using ViewModels.Incident
@model IncidentViewModel

<style>
    .text-submitted {
        color: red;
    }

    .status-submitted {
        background-color: red;
    }

    .status-validated {
        background-color: darkorange;
    }

    .text-validated {
        color: darkorange;
        font-weight: 600;
    }

    .status-dispatched {
        background-color: orange;
    }

    .text-dispatched {
        color: orange;
        font-weight: 600;
    }

    .status-started {
        background-color: blue;
    }

    .text-started {
        color: blue;
        font-weight: 600;
    }

    .status-completed {
        background-color: limegreen;
    }

    .text-completed {
        color: limegreen;
        font-weight: 600;
    }

    .status-cancelled {
        background-color: grey;
    }

    .text-cancelled {
        color: gray;
        font-weight: 600;
    }

    .badge-low {
        background-color: limegreen;
    }

    .badge-medium {
        background-color: darkorange;
    }

    .badge-high {
        background-color: red;
    }

    .statusFilter {
        margin-right: 16px;
    }

    #statusSelect {
        width: auto;
    }

    .btn.btn-primary {
        width: 200px;
    }

    .form-control.search-input {
        height: 38px;
        min-height: 38px;
    }

    th, td {
        white-space: nowrap;
        text-align: left !important;
    }

    .btnIcon {
        margin-right: 8px;
    }

    .incident-table {
        overflow-y: hidden;
        overflow-x: auto;
        overflow: visible !important;
    }

    .customTableDropdown .dropdown-toggle {
        font-size: 14px;
        padding: 4px 15px 4px 15px !important;
        color: #ffffff !important;
    }

        .customTableDropdown .dropdown-toggle:hover {
            background-color: transparent !important;
            border-color: #000000;
            color: #000000 !important;
        }

            .customTableDropdown .dropdown-toggle:hover::before {
                filter: brightness(0) !important;
            }

        .customTableDropdown .dropdown-toggle::before {
            display: none;
            /*    width: 11px;
                filter: brightness(1) !important;
                left: 81% !important;
                rotate: 92deg !important; */
        }

        .customTableDropdown .dropdown-toggle.status-started::before {
            left: 71% !important;
        }

    .eyeIcon {
        color: #1d4ed8;
    }

    .noteIcon {
        color: #15803d;
    }

    .historyIcon {
        color: #7e22ce;
    }

    .editIcon {
        color: #f54e00;
    }

    .map i.fa {
        color: grey;
        margin-right: 5px;
    }

    .date-time-sec p {
        font-size: 14px;
        font-weight: 400;
        margin-bottom: 1px;
    }

    .AddIncident {
        margin-left: 16px;
    }

    .InfoCard {
        border-radius: 6px;
        background: #f7f7f7;
    }

    .CustomTab .nav-link {
        border: none;
        color: #2f2f2f !important;
        border-bottom: 1px solid #dee2e6 !important;
        border-radius: 0;
    }

        .CustomTab .nav-link:hover {
            color: #000 !important;
            border-bottom: 1px solid #dee2e6 !important;
        }

        .CustomTab .nav-link.active {
            color: #f54e00 !important;
            border-bottom: 1px solid #f54e00 !important;
            background-color: #ffffff !important;
            border-radius: 0;
        }

            .CustomTab .nav-link.active:hover {
                color: #f54e00 !important;
                border-bottom: 1px solid #f54e00 !important;
            }

    .CustomTab .nav-item {
        margin-bottom: 0 !important;
    }

    .CustomTab .nav-link .fa {
        margin-right: 10px !important;
    }

    .nav-link i.fa {
        color: #f54e00;
    }

    .checkBoxTitle {
        font-size: 18px;
        font-weight: 500;
        margin-bottom: 15px;
    }

    .checkBoxTitle {
        font-size: 18px;
        font-weight: 500;
        margin-bottom: 15px;
    }

    #addIncidentModal .form-check-input {
        width: 20px;
        height: 20px;
        margin-right: 8px;
    }

    #addIncidentModal .form-check-label {
        font-size: 15px;
    }

    #addIncidentModal .form-label {
        font-size: 15px;
    }
</style>

<div class="incidentSec">
    <div class="topSearchbar">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h3>Incident</h3>
            <div class="right-sec d-flex  align-items-center mb-3">

                <div class="search-container me-3">
                    <i class="fa-solid fa-magnifying-glass search-icon"></i>
                    <input type="text" class="form-control search-input" placeholder="Search incidents..." id="global_search_value">
                </div>
                <div class="statusFilter">
                    <select class="form-select" id="statusSelect" placeholder="status">
                        <option value="" selected>--Select--</option>
                        @foreach (var item in Model.statusLegends)
                        {
                            <option value="@item.Value">@item.Text</option>
                        }
                    </select>
                </div>
                <div class="severityFilter">
                    <select class="form-select" id="severitySelect" placeholder="Severity">
                        <option value="" selected>--Select--</option>
                        @foreach (var item in Model.severityLevels)
                        {
                            <option value="@item.Value">@item.Text</option>
                        }
                    </select>
                </div>
                <a href="#" class="btn btn-primary AddIncident" data-bs-toggle="modal" data-bs-target="#addIncidentModal"><i class="fa fa-plus"></i>Add New Incident</a>
            </div>
        </div>
    </div>

    <div class="table-responsive incident-table" id="incidentGrid">
        @await Html.PartialAsync("~/Views/Incidents/_IncidentGrid.cshtml", Model)
    </div>
</div>


<div class="modal fade" id="addIncidentModal" tabindex="-1" aria-labelledby="addIncidentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addIncidentModalModalLabel">Add Incident</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="NewIncidentForm" enctype="multipart/form-data">
                    <ul class="nav nav-pills incidentFilter CustomTab" id="pills-tab" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="pills-caller-tab" data-bs-toggle="pill"
                                    data-bs-target="#pills-caller" type="button" role="tab">
                                <i class="fa fa-user"></i>Caller/Source Information
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link " id="pills-location-tab" data-bs-toggle="pill"
                                    data-bs-target="#pills-location" type="button" role="tab">
                                <i class="fa fa-map-pin"></i>Location of Incident
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link " id="pills-detail-tab" data-bs-toggle="pill"
                                    data-bs-target="#pills-detail" type="button" role="tab">
                                <i class="fa fa-list-check"></i>Incident Details
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link " id="pills-description-tab" data-bs-toggle="pill"
                                    data-bs-target="#pills-description" type="button" role="tab">
                                <i class="fa  fa-address-card"></i>Description of Issue
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link " id="pills-severity-tab" data-bs-toggle="pill"
                                    data-bs-target="#pills-severity" type="button" role="tab">
                                <i class="fa fa-thermometer-full"></i>Severity
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link " id="pills-safety-tab" data-bs-toggle="pill"
                                    data-bs-target="#pills-safety" type="button" role="tab">
                                <i class="fa fa-shield"></i>Environmental / Safety Indicators
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link " id="pills-support-tab" data-bs-toggle="pill"
                                    data-bs-target="#pills-support" type="button" role="tab">
                                <i class="fa fa-info-circle"></i>Supporting Information
                            </button>
                        </li>
                    </ul>
                    <div class="tab-content" id="newIncidentTabContent">
                        <div class="tab-pane fade show active" id="pills-caller" role="tabpanel" aria-labelledby="caller-tab">
                            @await Html.PartialAsync("~/Views/Incidents/_CallerInformation.cshtml", Model)
                        </div>
                        <div class="tab-pane fade" id="pills-location" role="tabpanel" aria-labelledby="location-tab">
                            @await Html.PartialAsync("~/Views/Incidents/_Location.cshtml", Model)
                        </div>
                        <div class="tab-pane fade" id="pills-detail" role="tabpanel" aria-labelledby="detail-tab">
                            @await Html.PartialAsync("~/Views/Incidents/_IncidentDetails.cshtml", Model)
                        </div>
                        <div class="tab-pane fade" id="pills-description" role="tabpanel" aria-labelledby="description-tab">
                            @await Html.PartialAsync("~/Views/Incidents/_DescriptionIssue.cshtml", Model)
                        </div>
                        <div class="tab-pane fade" id="pills-severity" role="tabpanel" aria-labelledby="severity-tab">
                            @await Html.PartialAsync("~/Views/Incidents/_Severity.cshtml", Model)
                        </div>
                        <div class="tab-pane fade" id="pills-safety" role="tabpanel" aria-labelledby="safety-tab">
                            @await Html.PartialAsync("~/Views/Incidents/_Environmental.cshtml", Model)
                        </div>
                        <div class="tab-pane fade" id="pills-support" role="tabpanel" aria-labelledby="support-tab">
                            @await Html.PartialAsync("~/Views/Incidents/_SupportingInformation.cshtml", Model)
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<script src="~/js/custom/loader/loader.js"></script>
<script src="~/js/masking/initiate-masking.js"></script>
<script src="~/js/views/incident/incidentform.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", function () {

    const eventSelect = document.getElementById('eventTypeId');

    const eventSections  = {
        gas: document.getElementById('gasOptions'),
        equipment: document.getElementById('equipmentOptions'),
        thirdparty: document.getElementById('thirdpartyOptions'),
        natural: document.getElementById('naturalOptions'),
        other: document.getElementById('otherInputWrapper')
    };

    eventSelect.addEventListener('change', function () {
        // hide all first
        Object.values(eventSections).forEach(sec => sec.classList.add('d-none'));

        // show selected
        const selected = this.value;
        if (eventSections[selected]) {
            eventSections[selected].classList.remove('d-none');
        }
    });

    const severitySelect  = document.getElementById('severity');

    const severitySections  = {
      moderate: document.getElementById('moderateOptions'),
      low: document.getElementById('lowOptions'),
      high: document.getElementById('highOptions'),

    };

    severitySelect.addEventListener('change', function () {
      // hide all sections first
      Object.values(severitySections).forEach(sec => sec.classList.add('d-none'));

      // show the relevant one
      const selected = this.value;
      if (severitySections[selected]) {
        severitySections[selected].classList.remove('d-none');
      }
    });

    //   const photoInput = document.getElementById('photoInput');
    // const photoPreview = document.getElementById('photoPreview');

    // photoInput.addEventListener('change', function() {
    //   const file = this.files[0];
    //   if (file) {
    //     const reader = new FileReader();
    //     reader.onload = function(e) {
    //       photoPreview.src = e.target.result;
    //       photoPreview.classList.remove('d-none');
    //     }
    //     reader.readAsDataURL(file);
    //   } else {
    //     photoPreview.src = "";
    //     photoPreview.classList.add('d-none');
    //   }
    // });
    });
</script>